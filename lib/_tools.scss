@use '../node_modules/sass-mq/mq';
@use '../node_modules/gel-sass-tools/sass-tools';
@use 'sass:map';

///*------------------------------------*\
//    # GEL TYPOGRAPHY - TOOL
//\*------------------------------------*/

// Replace `$search` with `$replace` in `$string`
//
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
//
// @access private
//
// @return {String} - Updated string
//
// @author Hugo Giraudel
// @link http://bit.ly/1Khge01
//
@function _gel-str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + _gel-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}


// Combine the the value of two Sass maps
//
// @param {Map} $source - The orignal Sass map
// @param {Map} $map - Sass map containing the new values to be combined
//
// @access private
//
// @return {Map} - New map consistenting of the values of both supplied maps
//
// @author Hugo Giraudel
// @link http://bit.ly/1PPIoj4
//
@function _gel-map-combine($source, $map) {
    @each $key, $value in $map {
        $new: ($key: $value);

        @if map-has-key($source, $key) {
            $current: map-get($source, $key);
            $new: ($key: map.merge($current, $value));
        }

        $source: map.merge($source, $new);
    }

    @return $source;
}


// Return the type settings for the requested type class/type group. If a bold variant is
// requested the bold type values will be combined with the type values of the non-bold
// variant.
//
// @param {String} $type-class - name of the type class you want the settings for (e.g. pica)
// @param {String} $type-group (all) - which type group you want the values for (e.g. group-a)
//
// @returns {Map} - a map of the type settings for the requested type class/type group
//
// @author Shaun Bent
// @author Adam Bulmer
//
@function gel-typography($type-class, $type-group: 'all') {
    $type-settings: map-get($gel-type-settings, $type-class);

    @if (str-index($type-class, '-bold')) {
        $root-type-group: map-get($gel-type-settings, _gel-str-replace($type-class, '-bold'));
        $type-settings: _gel-map-combine($root-type-group, $type-settings);
    }

    @if ($type-group != 'all') {
        @return map-get($type-settings, $type-group);
    }

    @return $type-settings;
}


// Output the type values for the requested type class (e.g pica). This will return all required media
// queries and no-touch fallbacks
//
// @param {String} $type-class - name of the type class to output the values for
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin gel-typography($type-class) {
    @if $core {
        $groupA: gel-typography($type-class, 'group-a');
        @include _gel-output-type-values($groupA);
        @include reith-letter-spacing($groupA);
    }

    @if $enhanced {
        @include mq.mq($from: gel-bp-type-b) {
            $groupB: gel-typography($type-class, 'group-b');
            @include _gel-output-type-values($groupB);
            @include reith-letter-spacing($groupB);
        }

        @include mq.mq($from: gel-bp-type-c) {
            $groupC: gel-typography($type-class, 'group-c');
            @include _gel-output-type-values($groupC);
            @include reith-letter-spacing($groupC);

            .#{$gel-type-touch-class} & {
                $groupNoTouch: gel-typography($type-class, $gel-type-no-touch-group);
                @include _gel-output-type-values($groupNoTouch);
                @include reith-letter-spacing($groupNoTouch);
            }
        }
    }
}


// Loop through a supplied Sass map and return each key/value as CSS properties
// and values. Any `px` value will be automatically passed to the `toRem` tool
//
// @param {Map} $type-values - a map of CSS values in property: value format
//
// @access private
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin _gel-output-type-values($type-values) {
    @each $property, $value in $type-values {
        @if (type-of($value) == number and unit($value) == 'px') {
            @include sass-tools.toRem($property, $value);
        } @else {
            #{$property}: $value;
        }
    }
}

@mixin reith-letter-spacing($type-settings) {
    @if (type-of($type-settings) == 'map') {
        @if map-has-key($type-settings, 'letter-spacing') {
            .b-reith-sans-loaded &,
            .b-reith-serif-loaded & {
                letter-spacing: normal;
            }
        }
    }
}

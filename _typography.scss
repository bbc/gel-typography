@use 'node_modules/sass-mq/mq';
@use 'node_modules/gel-sass-tools/sass-tools';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

///*------------------------------------*\
//    # GEL TYPOGRAPHY
//\*------------------------------------*/

// define some output control variables
$core: true !default;
$enhanced: true !default;

///*------------------------------------*\
//    # GEL TYPOGRAPHY - SETTINGS
//\*------------------------------------*/

// The following variables are used to configure the GEL Typography component.
// These variables should not be modified or adjusted directly; you should
// predefine the variables in your own project, to overide these default settings.

/// General configuration
//
// The default namespace applied to all typography classes output is inherits
// from the default gel-namespace: `gel-`.
//
// @type String
// @link http://bit.ly/1Z6hPfd
//
$gel-type-namespace: sass-tools.$gel-namespace !default;

// The classname used to signify if the device needs to display the no-touch group. This
// class needs to be applied to high level elemet such as `body` or `html`
//
// @type String
//
$gel-type-touch-class: 'no-touch' !default;

// Which typography group contains the base or core typography styles
//
// @type String
//
$gel-type-base-group: 'group-a';

// Which typography group contains our non-touch typography styles
//
// @type String
//
$gel-type-no-touch-group: 'group-d';

/// Output configuration
//
// By default the typography component has no output and just exposes a
// series of Sass mixins and tools. Enabling this option will output
// a series of typography classes to be used within your markup.
//
// @type Bool
//
$gel-type-enable--markup-output: false !default;

// The BBCs global header and footer, Barlesque, will set the correct font-family
// on the <body> tag but if you're working on a project without Barlesque will need
// to enable this flag to have the correct font-family declared
//
// @type Bool
//
$gel-type-enable--font-family: false !default;

// Map the GEL Typography classes to the relevant HTML elements
//
// @type Bool
//
$gel-type-enable--base-elements: false !default;

// Map the larger GEL typography with the default gel-type-settings
//
// @type Bool
//
$gel-type-enable--larger-type-sizes: false !default;

// The GEL typography specification for each type class at each type group.
// Having these values stored in a map allows them to be easily updated and
// customised for specific non-latin character sets.
//
// @type Map
//
$gel-type-settings: (
  'canon': (
    'group-a': (
      'font-size': 28px,
      'line-height': 32px,
    ),
    'group-b': (
      'font-size': 32px,
      'line-height': 36px,
    ),
    'group-c': (
      'font-size': 52px,
      'line-height': 56px,
    ),
    'group-d': (
      'font-size': 44px,
      'line-height': 48px,
    ),
  ),
  'canon-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'trafalgar': (
    'group-a': (
      'font-size': 20px,
      'line-height': 24px,
    ),
    'group-b': (
      'font-size': 24px,
      'line-height': 28px,
    ),
    'group-c': (
      'font-size': 36px,
      'line-height': 40px,
    ),
    'group-d': (
      'font-size': 32px,
      'line-height': 36px,
    ),
  ),
  'trafalgar-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'paragon': (
    'group-a': (
      'font-size': 20px,
      'line-height': 24px,
    ),
    'group-b': (
      'font-size': 22px,
      'line-height': 26px,
    ),
    'group-c': (
      'font-size': 28px,
      'line-height': 32px,
    ),
    'group-d': (
      'font-size': 28px,
      'line-height': 32px,
    ),
  ),
  'paragon-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'double-pica': (
    'group-a': (
      'font-size': 20px,
      'line-height': 24px,
    ),
    'group-c': (
      'font-size': 26px,
      'line-height': 30px,
    ),
    'group-d': (
      'font-size': 24px,
      'line-height': 28px,
    ),
  ),
  'double-pica-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'great-primer': (
    'group-a': (
      'font-size': 18px,
      'line-height': 22px,
    ),
    'group-c': (
      'font-size': 21px,
      'line-height': 24px,
    ),
    'group-d': (
      'font-size': 20px,
    ),
  ),
  'great-primer-bold': (
    'group-a': (
      'font-weight': bold,
    ),
    'group-b': (
      'letter-spacing': -1px,
    ),
  ),
  'pica': (
    'group-a': (
      'font-size': 15px,
      'line-height': 20px,
    ),
    'group-b': (
      'font-size': 16px,
      'line-height': 20px,
    ),
    'group-c': (
      'font-size': 18px,
      'line-height': 22px,
    ),
    'group-d': (
      'font-size': 16px,
      'line-height': 20px,
    ),
  ),
  'pica-bold': (
    'group-a': (
      'font-weight': bold,
    ),
  ),
  'long-primer': (
    'group-a': (
      'font-size': 15px,
      'line-height': 18px,
    ),
    'group-c': (
      'line-height': 20px,
    ),
    'group-d': (
      'font-size': 14px,
      'line-height': 18px,
    ),
  ),
  'long-primer-bold': (
    'group-a': (
      'font-weight': bold,
    ),
  ),
  'brevier': (
    'group-a': (
      'font-size': 14px,
      'line-height': 16px,
    ),
    'group-b': (
      'line-height': 18px,
    ),
    'group-d': (
      'font-size': 13px,
      'line-height': 16px,
    ),
  ),
  'brevier-bold': (
    'group-a': (
      'font-weight': bold,
    ),
  ),
  'minion': (
    'group-a': (
      'font-size': 12px,
      'line-height': 16px,
      'text-transform': uppercase,
    ),
    'group-c': (
      'font-size': 13px,
    ),
    'group-d': (
      'font-size': 12px,
    ),
  ),
  'minion-bold': (
    'group-a': (
      'font-weight': bold,
    ),
  ),
  'body-copy': (
    'group-a': (
      'font-size': 15px,
      'line-height': 20px,
    ),
    'group-b': (
      'font-size': 16px,
      'line-height': 22px,
    ),
    'group-c': (
      'font-size': 18px,
      'line-height': 24px,
    ),
    'group-d': (
      'font-size': 16px,
      'line-height': 22px,
    ),
  ),
) !default;

$gel-larger-font-sizes: (
  // Additional type sizes for larger contexts
  'atlas': (
      'group-a': (
        'font-size': 78px,
        'line-height': 84px,
      ),
      'group-b': (
        'font-size': 96px,
        'line-height': 104px,
      ),
      'group-c': (
        'font-size': 192px,
        'line-height': 208px,
      ),
      'group-d': (
        'font-size': 140px,
        'line-height': 148px,
      ),
    ),
  'atlas-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'elephant': (
    'group-a': (
      'font-size': 60px,
      'line-height': 64px,
    ),
    'group-b': (
      'font-size': 78px,
      'line-height': 84px,
    ),
    'group-c': (
      'font-size': 156px,
      'line-height': 170px,
    ),
    'group-d': (
      'font-size': 116px,
      'line-height': 124px,
    ),
  ),
  'elephant-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'imperial': (
    'group-a': (
      'font-size': 50px,
      'line-height': 54px,
    ),
    'group-b': (
      'font-size': 64px,
      'line-height': 72px,
    ),
    'group-c': (
      'font-size': 124px,
      'line-height': 136px,
    ),
    'group-d': (
      'font-size': 96px,
      'line-height': 104px,
    ),
  ),
  'imperial-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'royal': (
    'group-a': (
      'font-size': 40px,
      'line-height': 44px,
    ),
    'group-b': (
      'font-size': 52px,
      'line-height': 60px,
    ),
    'group-c': (
      'font-size': 94px,
      'line-height': 104px,
    ),
    'group-d': (
      'font-size': 76px,
      'line-height': 84px,
    ),
  ),
  'royal-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  ),
  'foolscap': (
    'group-a': (
      'font-size': 32px,
      'line-height': 36px,
    ),
    'group-b': (
      'font-size': 40px,
      'line-height': 44px,
    ),
    'group-c': (
      'font-size': 72px,
      'line-height': 80px,
    ),
    'group-d': (
      'font-size': 56px,
      'line-height': 60px,
    ),
  ),
  'foolscap-bold': (
    'group-a': (
      'font-weight': bold,
      'letter-spacing': -1px,
    ),
  )
) !default;

// Adds the typography specific breakpoints to the Sass MQ list
// of breakpoints
//
@include mq.add-breakpoint(gel-bp-type-b, 320px);
@include mq.add-breakpoint(gel-bp-type-c, 600px);

///*------------------------------------*\
//    # GEL TYPOGRAPHY - TOOL
//\*------------------------------------*/

// Replace `$search` with `$replace` in `$string`
//
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
//
// @access private
//
// @return {String} - Updated string
//
// @author Hugo Giraudel
// @link http://bit.ly/1Khge01
//
@function _gel-str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      _gel-str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

// Combine the the value of two Sass maps
//
// @param {Map} $source - The orignal Sass map
// @param {Map} $map - Sass map containing the new values to be combined
//
// @access private
//
// @return {Map} - New map consistenting of the values of both supplied maps
//
// @author Hugo Giraudel
// @link http://bit.ly/1PPIoj4
//
@function _gel-map-combine($source, $map) {
  @each $key, $value in $map {
    $new: (
      $key: $value,
    );

    @if map.has-key($source, $key) {
      $current: map.get($source, $key);
      $new: (
        $key: map.merge($current, $value),
      );
    }

    $source: map.merge($source, $new);
  }

  @return $source;
}

// Return the type settings for the requested type class/type group. If a bold variant is
// requested the bold type values will be combined with the type values of the non-bold
// variant.
//
// @param {String} $type-class - name of the type class you want the settings for (e.g. pica)
// @param {String} $type-group (all) - which type group you want the values for (e.g. group-a)
//
// @returns {Map} - a map of the type settings for the requested type class/type group
//
// @author Shaun Bent
// @author Adam Bulmer
//
@function gel-typography($type-class, $type-group: 'all') {
  $type-settings: map.get($gel-type-settings, $type-class);

  @if (string.index($type-class, '-bold')) {
    $root-type-group: map.get($gel-type-settings, _gel-str-replace($type-class, '-bold'));
    $type-settings: _gel-map-combine($root-type-group, $type-settings);
  }

  @if ($type-group != 'all') {
    @return map.get($type-settings, $type-group);
  }

  @return $type-settings;
}

// Output the type values for the requested type class (e.g pica). This will return all required media
// queries and no-touch fallbacks
//
// @param {String} $type-class - name of the type class to output the values for
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin gel-typography($type-class) {
  @if $core {
    $groupA: gel-typography($type-class, 'group-a');
    @include _gel-output-type-values($groupA);
    @include reith-letter-spacing($groupA);
  }

  @if $enhanced {
    @include mq.mq($from: gel-bp-type-b) {
      $groupB: gel-typography($type-class, 'group-b');
      @include _gel-output-type-values($groupB);
      @include reith-letter-spacing($groupB);
    }

    @include mq.mq($from: gel-bp-type-c) {
      $groupC: gel-typography($type-class, 'group-c');
      @include _gel-output-type-values($groupC);
      @include reith-letter-spacing($groupC);

      .#{$gel-type-touch-class} & {
        $groupNoTouch: gel-typography($type-class, $gel-type-no-touch-group);
        @include _gel-output-type-values($groupNoTouch);
        @include reith-letter-spacing($groupNoTouch);
      }
    }
  }
}

// Loop through a supplied Sass map and return each key/value as CSS properties
// and values. Any `px` value will be automatically passed to the `toRem` tool
//
// @param {Map} $type-values - a map of CSS values in property: value format
//
// @access private
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin _gel-output-type-values($type-values) {
  @each $property, $value in $type-values {
    @if (meta.type-of($value) == number and math.unit($value) == 'px') {
      @include sass-tools.toRem($property, $value);
    } @else {
      #{$property}: $value;
    }
  }
}

@mixin reith-letter-spacing($type-settings) {
  @if (meta.type-of($type-settings) == 'map') {
    @if map.has-key($type-settings, 'letter-spacing') {
      .b-reith-sans-loaded &,
      .b-reith-serif-loaded & {
        letter-spacing: normal;
      }
    }
  }
}

// If larger font sizes enable, merge them with gel-type-settings
@if $gel-type-enable--larger-type-sizes {
  $gel-type-settings: map.merge($gel-type-settings, $gel-larger-font-sizes);
}

// Output the typography styles for the 4 groups
@if $gel-type-enable--markup-output {
  @each $type-class, $type-values in $gel-type-settings {
    .#{$gel-type-namespace}#{$type-class},
    %#{$gel-type-namespace}#{$type-class} {
      @include gel-typography($type-class);
    }
  }
}

@if $gel-type-enable--font-family {
  // Barlesque will set the correct font-family on the <body> tag but if you're working on a project
  // without Barlesque you might want to enable this flag
  //
  body {
    font-family: Helvetica, Arial, freesans, sans-serif;
  }
}

@if $gel-type-enable--base-elements {
  // Map the GEL Typography classes to the relevant HTML elements
  //
  h1 {
    @extend %#{$gel-type-namespace}trafalgar;
  }
  h2 {
    @extend %#{$gel-type-namespace}double-pica;
  }
  h3 {
    @extend %#{$gel-type-namespace}great-primer;
  }
  h4 {
    @extend %#{$gel-type-namespace}pica;
  }
}
